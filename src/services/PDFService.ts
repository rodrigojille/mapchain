import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { PropertyData } from './propertyApi';
import { User } from '../types/user';
import QRCode from 'qrcode';
import { useTranslation } from '../hooks/useTranslation';

// Extend jsPDF with autotable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

export interface ValuationReportData {
  property: PropertyData;
  valuationAmount: number;
  valuationDate: string;
  valuator?: User;
  tokenId?: string;
  factors?: Record<string, number>;
  isOfficial: boolean;
  confidenceScore?: number;
  methodology?: string;
  notes?: string;
}

export class PDFService {
  private language: 'en' | 'es';
  private translations: Record<string, string>;

  constructor(language: 'en' | 'es' = 'en') {
    this.language = language;
    
    // Load translations based on language
    if (language === 'es') {
      this.translations = {
        title: 'Informe de Valoración de Propiedad',
        official: 'Valoración Oficial de Propiedad',
        ai: 'Valoración de IA',
        date: 'Fecha de Valoración',
        property: 'Detalles de la Propiedad',
        address: 'Dirección',
        value: 'Monto de Valoración',
        valuator: 'Tasador Certificado',
        blockchain: 'Verificación Blockchain',
        tokenId: 'ID de Token',
        factors: 'Factores de Valoración',
        factor: 'Factor',
        impact: 'Impacto',
        confidence: 'Puntuación de Confianza',
        methodology: 'Metodología',
        notes: 'Notas',
        disclaimer: 'Este informe de valoración está asegurado en la blockchain Hedera y puede verificarse utilizando el ID de token proporcionado anteriormente.',
        page: 'Página',
        of: 'de',
        generatedBy: 'Generado por MapChain',
        verifyAt: 'Verificar en',
        location: 'Ubicación',
        propertyType: 'Tipo de Propiedad',
        size: 'Tamaño',
        bedrooms: 'Dormitorios',
        bathrooms: 'Baños',
        yearBuilt: 'Año de Construcción',
      };
    } else {
      this.translations = {
        title: 'Property Valuation Report',
        official: 'Official Property Valuation',
        ai: 'AI Valuation',
        date: 'Valuation Date',
        property: 'Property Details',
        address: 'Address',
        value: 'Valuation Amount',
        valuator: 'Certified Valuator',
        blockchain: 'Blockchain Verification',
        tokenId: 'Token ID',
        factors: 'Valuation Factors',
        factor: 'Factor',
        impact: 'Impact',
        confidence: 'Confidence Score',
        methodology: 'Methodology',
        notes: 'Notes',
        disclaimer: 'This valuation report is secured on the Hedera blockchain and can be verified using the token ID provided above.',
        page: 'Page',
        of: 'of',
        generatedBy: 'Generated by MapChain',
        verifyAt: 'Verify at',
        location: 'Location',
        propertyType: 'Property Type',
        size: 'Size',
        bedrooms: 'Bedrooms',
        bathrooms: 'Bathrooms',
        yearBuilt: 'Year Built',
      };
    }
  }

  /**
   * Generate a PDF valuation report
   */
  public async generateValuationReport(data: ValuationReportData): Promise<string> {
    const { property, valuationAmount, valuationDate, valuator, tokenId, factors, isOfficial, confidenceScore, methodology, notes } = data;
    
    // Create a new PDF document
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    
    // Add logo and header
    this.addHeader(doc, isOfficial);
    
    // Add property details
    this.addPropertyDetails(doc, property);
    
    // Add valuation details
    this.addValuationDetails(doc, valuationAmount, valuationDate, valuator, tokenId, isOfficial, confidenceScore);
    
    // Add valuation factors if available
    if (factors && Object.keys(factors).length > 0) {
      this.addValuationFactors(doc, factors);
    }
    
    // Add methodology if available
    if (methodology) {
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(this.translations.methodology, 20, doc.internal.pageSize.height - 80);
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(10);
      doc.text(this.splitTextToSize(doc, methodology, 170), 20, doc.internal.pageSize.height - 75);
    }
    
    // Add notes if available
    if (notes) {
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(this.translations.notes, 20, doc.internal.pageSize.height - 50);
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(10);
      doc.text(this.splitTextToSize(doc, notes, 170), 20, doc.internal.pageSize.height - 45);
    }
    
    // Add disclaimer and blockchain verification
    this.addBlockchainVerification(doc, tokenId);
    
    // Add footer with page numbers
    const totalPages = doc.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150);
      doc.text(
        `${this.translations.page} ${i} ${this.translations.of} ${totalPages} | ${this.translations.generatedBy}`,
        doc.internal.pageSize.width / 2,
        doc.internal.pageSize.height - 10,
        { align: 'center' }
      );
    }
    
    // Return the PDF as a data URL
    return doc.output('dataurlstring');
  }

  /**
   * Add header to the PDF
   */
  private addHeader(doc: jsPDF, isOfficial: boolean): void {
    // Add logo (placeholder)
    doc.setFillColor(41, 98, 255);
    doc.rect(0, 0, doc.internal.pageSize.width, 40, 'F');
    
    // Add title
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(22);
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.title, 20, 20);
    
    // Add subtitle
    doc.setFontSize(14);
    doc.text(
      isOfficial ? this.translations.official : this.translations.ai,
      20,
      30
    );
    
    // Reset text color
    doc.setTextColor(0, 0, 0);
  }

  /**
   * Add property details to the PDF
   */
  private addPropertyDetails(doc: jsPDF, property: PropertyData): void {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.property, 20, 50);
    
    // Property image placeholder
    if (property.images && property.images.length > 0) {
      try {
        doc.addImage(property.images[0], 'JPEG', 120, 55, 70, 50, undefined, 'FAST');
      } catch (error) {
        console.error('Error adding property image to PDF:', error);
        // Add a placeholder rectangle if image fails
        doc.setFillColor(200, 200, 200);
        doc.rect(120, 55, 70, 50, 'F');
      }
    } else {
      // Add a placeholder rectangle if no image
      doc.setFillColor(200, 200, 200);
      doc.rect(120, 55, 70, 50, 'F');
    }
    
    // Property details
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.address + ':', 20, 60);
    doc.setFont('helvetica', 'normal');
    doc.text(`${property.address.line1}`, 20, 65);
    doc.text(`${property.address.city}, ${property.address.state} ${property.address.zipCode}`, 20, 70);
    
    // Location
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.location + ':', 20, 80);
    doc.setFont('helvetica', 'normal');
    doc.text(`Lat: ${property.location.lat.toFixed(6)}, Lng: ${property.location.lng.toFixed(6)}`, 20, 85);
    
    // Property features
    if (property.features) {
      let yPos = 95;
      
      if (property.features.propertyType) {
        doc.setFont('helvetica', 'bold');
        doc.text(this.translations.propertyType + ':', 20, yPos);
        doc.setFont('helvetica', 'normal');
        doc.text(property.features.propertyType, 60, yPos);
        yPos += 5;
      }
      
      if (property.features.squareFootage) {
        doc.setFont('helvetica', 'bold');
        doc.text(this.translations.size + ':', 20, yPos);
        doc.setFont('helvetica', 'normal');
        doc.text(`${property.features.squareFootage} sq ft`, 60, yPos);
        yPos += 5;
      }
      
      if (property.features.bedrooms) {
        doc.setFont('helvetica', 'bold');
        doc.text(this.translations.bedrooms + ':', 20, yPos);
        doc.setFont('helvetica', 'normal');
        doc.text(property.features.bedrooms.toString(), 60, yPos);
        yPos += 5;
      }
      
      if (property.features.bathrooms) {
        doc.setFont('helvetica', 'bold');
        doc.text(this.translations.bathrooms + ':', 20, yPos);
        doc.setFont('helvetica', 'normal');
        doc.text(property.features.bathrooms.toString(), 60, yPos);
        yPos += 5;
      }
      
      if (property.features.yearBuilt) {
        doc.setFont('helvetica', 'bold');
        doc.text(this.translations.yearBuilt + ':', 20, yPos);
        doc.setFont('helvetica', 'normal');
        doc.text(property.features.yearBuilt.toString(), 60, yPos);
      }
    }
  }

  /**
   * Add valuation details to the PDF
   */
  private addValuationDetails(
    doc: jsPDF, 
    valuationAmount: number, 
    valuationDate: string, 
    valuator?: User, 
    tokenId?: string,
    isOfficial?: boolean,
    confidenceScore?: number
  ): void {
    // Add a line separator
    doc.setDrawColor(200, 200, 200);
    doc.line(20, 120, 190, 120);
    
    // Valuation amount
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.value, 20, 130);
    doc.setFontSize(20);
    doc.setTextColor(41, 98, 255);
    doc.text(`$${valuationAmount.toLocaleString()}`, 20, 140);
    doc.setTextColor(0, 0, 0);
    
    // Valuation date
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.date + ':', 120, 130);
    doc.setFont('helvetica', 'normal');
    doc.text(new Date(valuationDate).toLocaleDateString(this.language === 'es' ? 'es-ES' : 'en-US'), 120, 135);
    
    // Confidence score for AI valuations
    if (!isOfficial && confidenceScore !== undefined) {
      doc.setFontSize(10);
      doc.setFont('helvetica', 'bold');
      doc.text(this.translations.confidence + ':', 120, 145);
      doc.setFont('helvetica', 'normal');
      doc.text(`${(confidenceScore * 100).toFixed(1)}%`, 120, 150);
    }
    
    // Valuator details for official valuations
    if (isOfficial && valuator) {
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(this.translations.valuator, 20, 155);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(valuator.name, 20, 162);
      
      if (valuator.email) {
        doc.text(valuator.email, 20, 167);
      }
      
      // Add valuator license if available
      if ((valuator as any).license) {
        doc.text(`${this.language === 'es' ? 'Licencia' : 'License'}: ${(valuator as any).license}`, 20, 172);
      }
    }
  }

  /**
   * Add valuation factors to the PDF
   */
  private addValuationFactors(doc: jsPDF, factors: Record<string, number>): void {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.factors, 20, 185);
    
    // Create table data
    const tableData = Object.entries(factors).map(([factor, impact]) => {
      const formattedFactor = factor.charAt(0).toUpperCase() + factor.slice(1);
      const formattedImpact = `${(impact * 100).toFixed(1)}%`;
      return [formattedFactor, formattedImpact];
    });
    
    // Add table
    doc.autoTable({
      startY: 190,
      head: [[this.translations.factor, this.translations.impact]],
      body: tableData,
      theme: 'grid',
      headStyles: { fillColor: [41, 98, 255], textColor: [255, 255, 255] },
      margin: { left: 20, right: 20 },
    });
  }

  /**
   * Add blockchain verification to the PDF
   */
  private async addBlockchainVerification(doc: jsPDF, tokenId?: string): Promise<void> {
    // Add a line separator
    const finalY = doc.autoTable.previous.finalY || doc.internal.pageSize.height - 100;
    doc.setDrawColor(200, 200, 200);
    doc.line(20, finalY + 10, 190, finalY + 10);
    
    // Add blockchain verification section
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(this.translations.blockchain, 20, finalY + 20);
    
    if (tokenId) {
      // Add token ID
      doc.setFontSize(10);
      doc.setFont('helvetica', 'bold');
      doc.text(this.translations.tokenId + ':', 20, finalY + 30);
      doc.setFont('helvetica', 'normal');
      doc.text(tokenId, 60, finalY + 30);
      
      // Add QR code for verification
      try {
        const verificationUrl = `https://hashscan.io/testnet/token/${tokenId}`;
        const qrCodeDataUrl = await QRCode.toDataURL(verificationUrl);
        doc.addImage(qrCodeDataUrl, 'PNG', 140, finalY + 20, 40, 40);
        
        // Add verification URL
        doc.setFontSize(8);
        doc.text(`${this.translations.verifyAt}: hashscan.io`, 140, finalY + 65);
      } catch (error) {
        console.error('Error generating QR code:', error);
      }
    } else {
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(this.language === 'es' 
        ? 'Esta valoración aún no ha sido tokenizada en la blockchain.' 
        : 'This valuation has not yet been tokenized on the blockchain.', 
        20, finalY + 30
      );
    }
    
    // Add disclaimer
    doc.setFontSize(8);
    doc.setTextColor(100);
    doc.text(
      this.splitTextToSize(doc, this.translations.disclaimer, 170),
      20,
      finalY + 75
    );
    doc.setTextColor(0);
  }

  /**
   * Utility function to split text into multiple lines
   */
  private splitTextToSize(doc: jsPDF, text: string, maxWidth: number): string[] {
    return doc.splitTextToSize(text, maxWidth);
  }
}
